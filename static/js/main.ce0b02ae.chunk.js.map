{"version":3,"sources":["container/Toolbar/index.module.css","components/Code/index.tsx","components/P/index.tsx","const.tsx","components/Leaf/index.tsx","components/OrderedList/index.tsx","components/UnorderedList/index.tsx","components/Element/index.tsx","hooks/useEventObservable.tsx","utils.tsx","hooks/useToggleBold.tsx","hooks/useChangeContent.tsx","hooks/useToggleCodeBlock.tsx","hooks/useToggleItalic.tsx","hooks/useToggleUnderline.tsx","hooks/useToggleLayout.tsx","hooks/useToggleDel.tsx","hooks/usePickColor.tsx","hooks/useToggleListBlock.tsx","hooks/useClear.tsx","container/Toolbar/index.tsx","container/Editor/index.tsx","index.tsx"],"names":["module","exports","Code","props","style","attributes","children","P","FUNC","orderedList","unorderedList","left","center","right","LIST_TYPES","HOTKEYS","Leaf","leaf","bold","del","italic","underline","color","OrderedList","UnorderedList","Element","element","type","textAlign","layout","useEventObservable","subject$","useMemo","Subject","handleEvent","useCallback","value","next","toggleBlock","editor","format","Transforms","unwrapNodes","match","n","includes","split","setNodes","isBlockActive","Editor","isBlock","toggleMark","isMarkActive","Text","isText","nodes","universal","isBoldActive","useToggleBold","bold$","onToggleBold","useEffect","subscription","subscribe","unsubscribe","useChangeContent","isBlockCodeActive","useToggleCodeBlock","codeBlock$","onToggleCodeBlock","isItalicActive","useToggleItalic","italic$","onToggleItalic","isUnderlineActive","useToggleUnderline","underline$","onToggleUnderline","isLayoutActive","useToggleLayout","layout$","onToggleLayout","isDelActive","useToggleDel","del$","onToggleDel","usePickColor","pickColor$","onPickColor","useSlate","pipe","throttleTime","isBlockListActive","useToggleListBlock","listBlock$","onToggleListBlock","isActive","wrapNodes","useClear","clear$","onClear","clearBlock","textMarkList","unsetNodes","clearMark","Toolbar","toggleBold","toggleCodeBlock","toggleItalic","toggleUnderline","toggleLeftLayout","toggleCenterLayout","toggleRightLayout","toggleDel","toggleOrderedListBlock","toggleUnorderedListBlock","pickColor","clear","createEventHandler","fn","e","preventDefault","onToggleLeftLayout","onToggleCenterLayout","onToggleRightLayout","onToggleOrderedListBlock","onToggleUnorderedListBlock","getColor","className","styles","active","onClick","onChange","target","RichEditor","autoFocus","spellCheck","placeholder","withHistory","withReact","createEditor","renderElement","renderLeaf","contentChange$","onContentChange","content","useObservable","text","onKeyDown","func","hotkey","isHotkey","App","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ce0b02ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"Toolbar_active__1_5B_\"};","import React, { FC } from 'react';\n\ninterface IProps {\n  style: any;\n  attributes: any;\n}\n\nconst Code: FC<IProps> = (props) => {\n  return (\n    <pre style={props.style} {...props.attributes}>\n      <code>{props.children}</code>\n    </pre>\n  );\n};\n\nexport default Code;\n","import React, { FC } from 'react';\n\ninterface IProps {\n  style: any;\n  attributes: any;\n}\n\nconst P: FC<IProps> = (props: any) => {\n  return (\n    <p style={props.style} {...props.attributes}>\n      {props.children}\n    </p>\n  );\n};\n\nexport default P;\n","export const DEFAULT_FONT_COLOR = '#000000';\n\nexport const FUNC: FuncType = {\n  bold: 'bold',\n  italic: 'italic',\n  underline: 'underline',\n  codeBlock: 'codeBlock',\n  del: 'del',\n  color: 'color',\n  list: {\n    orderedList: 'orderedList',\n    unorderedList: 'unorderedList',\n  },\n  layout: {\n    left: 'left',\n    center: 'center',\n    right: 'right',\n  },\n  listItem: 'listItem',\n  p: 'p',\n};\n\nexport const LIST_TYPES = [FUNC.list.orderedList, FUNC.list.unorderedList];\n\nexport const HOTKEYS = {\n  [FUNC.bold]: 'mod+b',\n  [FUNC.italic]: 'mod+i',\n  [FUNC.underline]: 'mod+u',\n  [FUNC.codeBlock]: 'mod+`',\n  [FUNC.layout.left]: 'cmd+shift+l',\n  [FUNC.layout.center]: 'cmd+shift+c',\n  [FUNC.layout.right]: 'cmd+shift+r',\n};\n","import React, { FC } from 'react';\nimport { FUNC, DEFAULT_FONT_COLOR } from '../../const';\nimport { RenderLeafProps } from 'slate-react';\n\ninterface IProps {\n  leaf: {\n    bold?: boolean;\n    underline?: boolean;\n    italic?: boolean;\n    del?: boolean;\n    color?: string;\n  };\n}\n\nconst Leaf: FC<RenderLeafProps & IProps> = ({ attributes, children, leaf }) => {\n  if (leaf.bold) {\n    children = <strong>{children}</strong>;\n  }\n\n  if (leaf.del) {\n    children = <s>{children}</s>;\n  }\n\n  if (leaf.italic) {\n    children = <em>{children}</em>;\n  }\n\n  if (leaf.underline) {\n    children = <u>{children}</u>;\n  }\n  return (\n    <span\n      {...attributes}\n      style={{\n        color: leaf[FUNC.color] ? leaf.color : DEFAULT_FONT_COLOR,\n      }}\n    >\n      {children}\n    </span>\n  );\n};\n\nexport default Leaf;\n","import React, { FC } from 'react';\n\ninterface IProps {\n  attributes: any;\n}\n\nconst OrderedList: FC<IProps> = (props) => {\n  return <ol {...props.attributes}>{props.children}</ol>;\n};\n\nexport default OrderedList;\n","import React, { FC } from 'react';\n\ninterface IProps {\n  attributes: any;\n}\n\nconst UnorderedList: FC<IProps> = (props) => {\n  return <ul {...props.attributes}>{props.children}</ul>;\n};\n\nexport default UnorderedList;\n","import React, { FC } from 'react';\nimport { RenderElementProps } from 'slate-react';\nimport { Code, P, OrderedList, UnorderedList } from '..';\nimport { FUNC } from '../../const';\n\ninterface IProps {\n  element: {\n    layout?: Layout;\n  };\n}\n\nconst Element: FC<RenderElementProps & IProps> = ({ element, attributes, children }) => {\n  switch (element.type) {\n    case FUNC.codeBlock:\n      return (\n        <Code style={{ textAlign: element.layout }} attributes={attributes}>\n          {children}\n        </Code>\n      );\n    case FUNC.list.orderedList:\n      return <OrderedList attributes={attributes}>{children}</OrderedList>;\n    case FUNC.list.unorderedList:\n      return <UnorderedList attributes={attributes}>{children}</UnorderedList>;\n    case FUNC.listItem:\n      return (\n        <li style={{ textAlign: element.layout }} {...attributes}>\n          {children}\n        </li>\n      );\n    default:\n      return (\n        <P style={{ textAlign: element.layout }} attributes={attributes}>\n          {children}\n        </P>\n      );\n  }\n};\n\nexport default Element;\n","import { Subject } from 'rxjs';\nimport { useMemo, useCallback } from 'react';\n\nexport type EventHandler<T> = (value: T) => void;\n\n/**\n * 生成回调事件和事件流，当回调事件触发时，生成事件流\n *\n * @export\n * @template T\n * @returns {[Subject<T>, EventHandler<T>]}\n */\nexport default function useEventObservable<T>(): [Subject<T>, EventHandler<T>] {\n  const subject$ = useMemo(() => new Subject<T>(), []);\n  const handleEvent = useCallback<EventHandler<T>>(\n    (value) => {\n      subject$.next(value);\n    },\n    [subject$]\n  );\n\n  return [subject$, handleEvent];\n}\n","import { Editor, Transforms, Text } from 'slate';\nimport { LIST_TYPES, FUNC } from './const';\n\nexport const clearBlock = (editor: Editor) => toggleBlock(editor, FUNC.p);\n\nexport const clearMark = (editor: Editor) => {\n  // TODO: 临时使用变量区分element mark和text mark，后续细化类型时统一封装。\n  const elementMarkList = ['layout'];\n  const textMarkList = [FUNC.bold, FUNC.color, FUNC.del, FUNC.italic, FUNC.underline];\n\n  Transforms.unsetNodes(editor, elementMarkList, {\n    match: (n) => Editor.isBlock(editor, n),\n  });\n  Transforms.unsetNodes(editor, textMarkList, {\n    match: (n) => Text.isText(n),\n    split: true,\n  });\n};\n\nexport const toggleBlock = (editor: Editor, format: FormatType) => {\n  // 如果外部有套ol、ul标签，则去除包裹\n  Transforms.unwrapNodes(editor, {\n    match: (n: any) => LIST_TYPES.includes(n.type),\n    split: true,\n  });\n  Transforms.setNodes(\n    editor,\n    { type: isBlockActive(format)(editor) ? null : format },\n    { match: (n) => Editor.isBlock(editor, n) }\n  );\n};\n\nexport const toggleMark = (editor: Editor, format: FormatType) => {\n  Transforms.setNodes(\n    editor,\n    { [format]: isMarkActive(format)(editor) ? null : true },\n    { match: (n) => Text.isText(n), split: true }\n  );\n};\n\nexport const isBlockActive = (format: FormatType) => (editor: Editor) => {\n  const [match] = Editor.nodes(editor, {\n    match: (n) => n.type === format,\n  }) as any;\n\n  return !!match;\n};\n\nexport const isMarkActive = (format: FormatType) => (editor: Editor) => {\n  const [match] = Editor.nodes(editor, {\n    match: (n) => {\n      return n[format] === true;\n    },\n    universal: true,\n  }) as any;\n  return !!match;\n};\n","import { Editor, Transforms, Text } from 'slate';\nimport { useEffect } from 'react';\nimport { useEventObservable } from '.';\nimport { EventHandler } from './useEventObservable';\nimport { Subject } from 'rxjs';\nimport { FUNC } from '../const';\nimport { isMarkActive, toggleMark } from '../utils';\n\nexport const isBoldActive = isMarkActive(FUNC.bold);\n\nconst useToggleBold = (): [Subject<Editor>, EventHandler<Editor>] => {\n  const [bold$, onToggleBold] = useEventObservable<Editor>();\n\n  useEffect(() => {\n    const subscription = bold$.subscribe((editor: Editor) => {\n      toggleMark(editor, FUNC.bold);\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [bold$]);\n\n  return [bold$, onToggleBold];\n};\n\nexport default useToggleBold;\n","import { useEventObservable } from '.';\nimport { Node } from 'slate';\nimport { Subject } from 'rxjs';\nimport { EventHandler } from './useEventObservable';\n\nconst useChangeContent = (): [Subject<Node[]>, EventHandler<Node[]>] => {\n  const [changeContent$, onChangeContent] = useEventObservable<Node[]>();\n\n  return [changeContent$, onChangeContent];\n};\n\nexport default useChangeContent;\n","import { Editor, Transforms } from 'slate';\nimport { useEffect } from 'react';\nimport { useEventObservable } from '.';\nimport { EventHandler } from './useEventObservable';\nimport { Subject } from 'rxjs';\nimport { FUNC } from '../const';\nimport { isBlockActive, toggleBlock } from '../utils';\n\nexport const isBlockCodeActive = isBlockActive(FUNC.codeBlock);\n\nconst useToggleCodeBlock = (): [Subject<Editor>, EventHandler<Editor>] => {\n  const [codeBlock$, onToggleCodeBlock] = useEventObservable<Editor>();\n  useEffect(() => {\n    const subscription = codeBlock$.subscribe((editor: Editor) => {\n      toggleBlock(editor, FUNC.codeBlock);\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [codeBlock$]);\n\n  return [codeBlock$, onToggleCodeBlock];\n};\n\nexport default useToggleCodeBlock;\n","import { Editor, Transforms, Text } from 'slate';\nimport { useEffect } from 'react';\nimport { useEventObservable } from '.';\nimport { EventHandler } from './useEventObservable';\nimport { Subject } from 'rxjs';\nimport { FUNC } from '../const';\nimport { isMarkActive, toggleMark } from '../utils';\n\nexport const isItalicActive = isMarkActive(FUNC.italic);\n\nconst useToggleItalic = (): [Subject<Editor>, EventHandler<Editor>] => {\n  const [italic$, onToggleItalic] = useEventObservable<Editor>();\n\n  useEffect(() => {\n    const subscription = italic$.subscribe((editor: Editor) => {\n      toggleMark(editor, FUNC.italic);\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [italic$]);\n\n  return [italic$, onToggleItalic];\n};\n\nexport default useToggleItalic;\n","import { Editor, Transforms, Text } from 'slate';\nimport { useEffect } from 'react';\nimport { useEventObservable } from '.';\nimport { EventHandler } from './useEventObservable';\nimport { Subject } from 'rxjs';\nimport { FUNC } from '../const';\nimport { isMarkActive, toggleMark } from '../utils';\n\nexport const isUnderlineActive = isMarkActive(FUNC.underline);\n\nconst useToggleUnderline = (): [Subject<Editor>, EventHandler<Editor>] => {\n  const [underline$, onToggleUnderline] = useEventObservable<Editor>();\n\n  useEffect(() => {\n    const subscription = underline$.subscribe((editor: Editor) => {\n      toggleMark(editor, FUNC.underline);\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [underline$]);\n\n  return [underline$, onToggleUnderline];\n};\n\nexport default useToggleUnderline;\n","import { Editor, Transforms } from 'slate';\nimport { useEffect } from 'react';\nimport { useEventObservable } from '.';\nimport { EventHandler } from './useEventObservable';\nimport { Subject } from 'rxjs';\n\nexport const isLayoutActive = (editor: Editor, layout: Layout) => {\n  const [match] = Editor.nodes(editor, {\n    match: (n) => {\n      return n.layout === layout;\n    },\n  }) as any;\n\n  return !!match;\n};\n\nconst useToggleLayout = (layout: Layout): [Subject<Editor>, EventHandler<Editor>] => {\n  const [layout$, onToggleLayout] = useEventObservable<Editor>();\n\n  useEffect(() => {\n    const subscription = layout$.subscribe((editor: Editor) => {\n      Transforms.setNodes(\n        editor,\n        {\n          layout: isLayoutActive(editor, layout) ? null : layout,\n        },\n        { match: (n) => Editor.isBlock(editor, n) }\n      );\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [layout, layout$]);\n\n  return [layout$, onToggleLayout];\n};\n\nexport default useToggleLayout;\n","import { Editor } from 'slate';\nimport { useEffect } from 'react';\nimport { useEventObservable } from '.';\nimport { EventHandler } from './useEventObservable';\nimport { Subject } from 'rxjs';\nimport { FUNC } from '../const';\nimport { toggleMark, isMarkActive } from '../utils';\n\nexport const isDelActive = isMarkActive(FUNC.del);\n\nconst useToggleDel = (): [Subject<Editor>, EventHandler<Editor>] => {\n  const [del$, onToggleDel] = useEventObservable<Editor>();\n  useEffect(() => {\n    const subscription = del$.subscribe((editor: Editor) => {\n      toggleMark(editor, FUNC.del);\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [del$]);\n\n  return [del$, onToggleDel];\n};\n\nexport default useToggleDel;\n","import { Transforms, Text, Editor } from 'slate';\nimport { useEffect } from 'react';\nimport { useEventObservable } from '.';\nimport { EventHandler } from './useEventObservable';\nimport { Subject } from 'rxjs';\nimport { throttleTime } from 'rxjs/operators';\nimport { useSlate } from 'slate-react';\n\nexport const getColor = (editor: Editor) => {\n  const [match] = Editor.nodes(editor, {\n    match: (n) => {\n      return !!n.color;\n    },\n  }) as any;\n  return match && match[0] ? match[0].color : null;\n};\n\nconst usePickColor = (): [Subject<string>, EventHandler<string>] => {\n  const [pickColor$, onPickColor] = useEventObservable<string>();\n  const editor = useSlate();\n\n  useEffect(() => {\n    const subscription = pickColor$.pipe(throttleTime(300)).subscribe((color: string) => {\n      Transforms.setNodes(editor, { color }, { match: (n) => Text.isText(n), split: true });\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [editor, pickColor$]);\n\n  return [pickColor$, onPickColor];\n};\n\nexport default usePickColor;\n","import { Editor, Transforms } from 'slate';\nimport { useEffect } from 'react';\nimport { useEventObservable } from '.';\nimport { EventHandler } from './useEventObservable';\nimport { Subject } from 'rxjs';\nimport { LIST_TYPES, FUNC } from '../const';\n\nexport const isBlockListActive = (editor: Editor, format: List) => {\n  const [match] = Editor.nodes(editor, {\n    match: (n) => {\n      return n.type === format;\n    },\n  }) as any;\n\n  return !!match;\n};\n\nconst useToggleListBlock = (format: List): [Subject<Editor>, EventHandler<Editor>] => {\n  const [listBlock$, onToggleListBlock] = useEventObservable<Editor>();\n  useEffect(() => {\n    const subscription = listBlock$.subscribe((editor: Editor) => {\n      const isActive = isBlockListActive(editor, format);\n      Transforms.unwrapNodes(editor, {\n        match: (n: any) => LIST_TYPES.includes(n.type),\n        split: true,\n      });\n      Transforms.setNodes(\n        editor,\n        { type: isActive ? null : FUNC.listItem },\n        { match: (n) => Editor.isBlock(editor, n) }\n      );\n      if (!isActive) {\n        Transforms.wrapNodes(editor, {\n          type: format,\n          children: [],\n        });\n      }\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [format, listBlock$]);\n\n  return [listBlock$, onToggleListBlock];\n};\n\nexport default useToggleListBlock;\n","import { Editor } from 'slate';\nimport { useEffect } from 'react';\nimport { useEventObservable } from '.';\nimport { EventHandler } from './useEventObservable';\nimport { Subject } from 'rxjs';\nimport { clearBlock, clearMark } from '../utils';\n\nconst useClear = (): [Subject<Editor>, EventHandler<Editor>] => {\n  const [clear$, onClear] = useEventObservable<Editor>();\n  useEffect(() => {\n    const subscription = clear$.subscribe((editor: Editor) => {\n      // 清空块级样式\n      clearBlock(editor);\n      // 清空内联样式\n      clearMark(editor);\n    });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [clear$]);\n\n  return [clear$, onClear];\n};\n\nexport default useClear;\n","import React, { FC, MouseEventHandler, useCallback, ChangeEventHandler } from 'react';\nimport { useSlate } from 'slate-react';\nimport {\n  useToggleBold,\n  useToggleCodeBlock,\n  useToggleItalic,\n  useToggleUnderline,\n  isBoldActive,\n  isBlockCodeActive,\n  isItalicActive,\n  isUnderlineActive,\n  useToggleLayout,\n  isLayoutActive,\n  useToggleDel,\n  isDelActive,\n  usePickColor,\n  getColor,\n  isBlockListActive,\n  useToggleListBlock,\n  useClear,\n} from '../../hooks';\nimport styles from './index.module.css';\nimport { FUNC, DEFAULT_FONT_COLOR } from '../../const';\n\ninterface ToolProps {}\n\nconst Toolbar: FC<ToolProps> = () => {\n  const editor = useSlate();\n  const [, toggleBold] = useToggleBold();\n  const [, toggleCodeBlock] = useToggleCodeBlock();\n  const [, toggleItalic] = useToggleItalic();\n  const [, toggleUnderline] = useToggleUnderline();\n  const [, toggleLeftLayout] = useToggleLayout(FUNC.layout.left);\n  const [, toggleCenterLayout] = useToggleLayout(FUNC.layout.center);\n  const [, toggleRightLayout] = useToggleLayout(FUNC.layout.right);\n  const [, toggleDel] = useToggleDel();\n  const [, toggleOrderedListBlock] = useToggleListBlock(FUNC.list.orderedList);\n  const [, toggleUnorderedListBlock] = useToggleListBlock(FUNC.list.unorderedList);\n  const [, pickColor] = usePickColor();\n  const [, clear] = useClear();\n  const createEventHandler = useCallback(\n    (fn): MouseEventHandler => (e) => {\n      e.preventDefault();\n      fn(editor);\n    },\n    [editor]\n  );\n  const onToggleBold = createEventHandler(toggleBold);\n\n  const onToggleCodeBlock = createEventHandler(toggleCodeBlock);\n\n  const onToggleItalic = createEventHandler(toggleItalic);\n\n  const onToggleUnderline = createEventHandler(toggleUnderline);\n\n  const onToggleLeftLayout = createEventHandler(toggleLeftLayout);\n\n  const onToggleCenterLayout = createEventHandler(toggleCenterLayout);\n\n  const onToggleRightLayout = createEventHandler(toggleRightLayout);\n\n  const onToggleDel = createEventHandler(toggleDel);\n\n  const onToggleOrderedListBlock = createEventHandler(toggleOrderedListBlock);\n\n  const onToggleUnorderedListBlock = createEventHandler(toggleUnorderedListBlock);\n\n  const onPickColor: ChangeEventHandler = (e) => {\n    pickColor((e.target as HTMLInputElement).value);\n  };\n\n  const onClear = createEventHandler(clear);\n\n  const color = getColor(editor);\n  return (\n    <div>\n      <button className={isBoldActive(editor) ? styles.active : ''} onClick={onToggleBold}>\n        Bold\n      </button>\n      <button className={isBlockCodeActive(editor) ? styles.active : ''} onClick={onToggleCodeBlock}>\n        Code Block\n      </button>\n      <button className={isItalicActive(editor) ? styles.active : ''} onClick={onToggleItalic}>\n        Italic\n      </button>\n      <button className={isUnderlineActive(editor) ? styles.active : ''} onClick={onToggleUnderline}>\n        Underline\n      </button>\n      <button className={isDelActive(editor) ? styles.active : ''} onClick={onToggleDel}>\n        Del\n      </button>\n      <button onClick={onClear}>Clear</button>\n      <button\n        className={isBlockListActive(editor, FUNC.list.orderedList) ? styles.active : ''}\n        onClick={onToggleOrderedListBlock}\n      >\n        Ol\n      </button>\n      <button\n        className={isBlockListActive(editor, FUNC.list.unorderedList) ? styles.active : ''}\n        onClick={onToggleUnorderedListBlock}\n      >\n        Ul\n      </button>\n      <button className={isLayoutActive(editor, FUNC.layout.left) ? styles.active : ''} onClick={onToggleLeftLayout}>\n        Left\n      </button>\n      <button\n        className={isLayoutActive(editor, FUNC.layout.center) ? styles.active : ''}\n        onClick={onToggleCenterLayout}\n      >\n        Center\n      </button>\n      <button className={isLayoutActive(editor, FUNC.layout.right) ? styles.active : ''} onClick={onToggleRightLayout}>\n        Right\n      </button>\n      <input type=\"color\" value={color ? color : DEFAULT_FONT_COLOR} onChange={onPickColor} />\n    </div>\n  );\n};\n\nexport default Toolbar;\n","import React, { useMemo, useCallback, KeyboardEvent, FC } from 'react';\nimport { createEditor } from 'slate';\nimport { Slate, Editable, withReact, RenderElementProps, RenderLeafProps } from 'slate-react';\nimport { Element, Leaf } from '../../components';\nimport {\n  useToggleBold,\n  useChangeContent,\n  useToggleCodeBlock,\n  useToggleItalic,\n  useToggleUnderline,\n  useToggleLayout,\n  useToggleDel,\n} from '../../hooks';\nimport Toolbar from '../Toolbar';\nimport { HOTKEYS, FUNC } from '../../const';\nimport isHotkey from 'is-hotkey';\nimport { useObservable } from 'rxjs-hooks';\nimport { withHistory } from 'slate-history';\n\ninterface IProps {\n  autoFocus?: boolean;\n  spellCheck?: boolean;\n  placeholder?: string;\n}\n\nconst RichEditor: FC<IProps> = ({ autoFocus, spellCheck, placeholder }) => {\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []);\n\n  const renderElement = useCallback((props: RenderElementProps) => {\n    return <Element {...props} />;\n  }, []);\n\n  const renderLeaf = useCallback((props: RenderLeafProps) => {\n    return <Leaf {...props} />;\n  }, []);\n\n  const [contentChange$, onContentChange] = useChangeContent();\n  const [, toggleBold] = useToggleBold();\n  const [, toggleCodeBlock] = useToggleCodeBlock();\n  const [, toggleItalic] = useToggleItalic();\n  const [, toggleUnderline] = useToggleUnderline();\n  const [, toggleLeftLayout] = useToggleLayout(FUNC.layout.left);\n  const [, toggleCenterLayout] = useToggleLayout(FUNC.layout.center);\n  const [, toggleRightLayout] = useToggleLayout(FUNC.layout.right);\n  const [, toggleDel] = useToggleDel();\n  const content = useObservable(() => contentChange$, [\n    {\n      type: 'p',\n      children: [{ text: '' }],\n    },\n  ]);\n\n  return (\n    <Slate editor={editor} value={content} onChange={onContentChange}>\n      <Toolbar />\n      <Editable\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        placeholder={placeholder || '请输入字符...'}\n        autoFocus={autoFocus || false}\n        spellCheck={spellCheck || false}\n        onKeyDown={(e: KeyboardEvent) => {\n          for (const func in HOTKEYS) {\n            const hotkey = HOTKEYS[func];\n            if (!isHotkey(hotkey, e as any)) continue;\n            e.preventDefault();\n            const map = {\n              [FUNC.bold]: toggleBold,\n              [FUNC.codeBlock]: toggleCodeBlock,\n              [FUNC.italic]: toggleItalic,\n              [FUNC.underline]: toggleUnderline,\n              [FUNC.del]: toggleDel,\n              [FUNC.layout.left]: toggleLeftLayout,\n              [FUNC.layout.center]: toggleCenterLayout,\n              [FUNC.layout.right]: toggleRightLayout,\n            };\n            map[func](editor);\n          }\n        }}\n      />\n    </Slate>\n  );\n};\n\nexport default RichEditor;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Editor from './container/Editor';\n\nclass App extends Component {\n  render() {\n    return <Editor></Editor>;\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// 模块热更新的 API\nif (module.hot) {\n  module.hot.accept();\n}\n"],"sourceRoot":""}